#!/bin/bash
# ------------------------------------------------------------------
#  create_usb_zip - create a USB-ZIP archive for an eXR ISO
# 
#  Copyright (c) 2013-2022 by Cisco Systems, Inc.
#  All rights reserved.
# ------------------------------------------------------------------

set -e

#$1 --> platform type
#$2 --> path to iso image

MCOPY_ERR=0
function recursive_mcopy()
{
    SOURCE=$1
    DEST_IMG=$2 
    for file in "$SOURCE"/*
    do 
        if [ -d "${file}" ]; then
            mcopy -i $DEST_IMG ${file} ::${file//$STG_DIR/} > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                MCOPY_ERR=1;
            else 
                recursive_mcopy "${file}" $DEST_IMG
            fi
        fi 
    done   
}

function sign () { 
    [ -z "${1}" ] && echo "Error: no file to sign" > 2 && return
    if [ -n "${JAM_PRODUCTION_IMAGE_BUILD}" ]; then
        echo "Signing ${1} for Production Build"
        if [ -n "${SWIMS_TICKET_DIR}" ]; then
            TICKET="${SWIMS_TICKET_DIR}/IOS-XR-SW-SEC_REL.tic"
        else
            TICKET="/auto/ioxdepot6/XR_SWIMS_keys/IOS-XR-SW-SEC_REL.tic"
        fi
        KEYTYPE="RELEASE"
    else
        echo "Signing ${1} for Development Build"
        TICKET="/users/$USER/.swimstickets/IOS-XR-SW-SEC_DEV.tic"
        KEYTYPE="DEV"
    fi
    /auto/exr-yocto/signing/secureboot/bin/imgsign.py \
        raw-sign \
        --cert_type crt \
        -p IOS-XR-SW-SEC \
        -K IOS-XR-SW-SEC \
        -I IOSXRSW \
        -k ${KEYTYPE} \
        -N "xr build" \
        -A Ticket \
        -T ${TICKET} \
        -o $1.signature \
        -c /auto/exr-yocto/signing/certificates \
        --image_location $1
}


SUPPORTED_PLATFORMS=(
    asr9k-x64
    iosxrwbd
    ncs1001
    ncs1004
    ncs1k
    ncs2k
    ncs540
    ncs5500
    ncs560
    ncs5k
)
if [ -z "$2" ]; then
    echo "Usage:      $0 <plat> <image_file_path>"
    echo "Example 1:"
    echo "            $0 ncs5k img-ncs5k/ncs5k-mini-x.iso"
    echo "Example 2: For GISO"
    echo "            $0 ncs5500 ncs5500-goldenk9-x.iso"
    echo "Supported eXR platforms: ${SUPPORTED_PLATFORMS[*]}"
    exit
fi

if ! [[ " ${SUPPORTED_PLATFORMS[*]} " =~ " $1 " ]]; then
    echo "Unsupported platform '$1'" >&2
    echo "Supported eXR platforms: ${SUPPORTED_PLATFORMS[*]}" >&2
    echo "For LNT platforms, use:" >&2
    echo "            buildx/infra/bin/create_usb -i <iso> -o <zip>" >&2
    exit 1
fi

if [ -e $2 ]; then

  STG_DIR=$(mktemp -d /tmp/usb_boot.XXXXXXXXXX)
  EFI_DIR=$STG_DIR/EFI/boot
  IMG_DIR=$STG_DIR/boot
  ISO_FILE=$(cd $(dirname $2); pwd)/$(basename $2)
  PLAT=$1
  if [[ $ISO_FILE =~ "golden" ]]; then
      ISO_VERSION=`isoinfo -i $2 -R -x /giso_info.txt | grep Version: | cut -d ' ' -f2`
      ZIP_FILE=$PLAT-usb_boot-$ISO_VERSION.zip
  else
      ZIP_FILE=$PLAT-usb_boot.zip
  fi

  PLAT_DIR=$STG_DIR/$1
  if [ $PLAT == "iosxrwbd" ]; then
      ISOREAD=$(which /auto/thirdparty-sdk/bin/isoread)
  fi 

  if [ $PLAT == "ncs1k" ]; then
    EFI_DIR=$STG_DIR/EFI/Cisco
  fi 
  
  if [ $PLAT == "ncs1001" ]; then
    EFI_DIR=$STG_DIR/EFI/Cisco
  fi
  
  if [ $PLAT == "ncs1004" ]; then
    EFI_DIR=$STG_DIR/EFI/Cisco_Install
  fi 

  if [ $PLAT == "ncs5k" ]; then
    EFI_DIR=$STG_DIR/EFI/Cisco
  fi 

  if [ $PLAT == "ncs2k" ]; then
    EFI_DIR=$STG_DIR/EFI/boot
  fi 

   # Create staging directory structure
   mkdir -p $EFI_DIR
   mkdir -p $IMG_DIR

   if [ $PLAT == "iosxrwbd" ]; then
      iso-read -i $ISO_FILE -e boot/vmedia/grub-cc.efi -o $EFI_DIR/grub-cc.efi
      iso-read -i $ISO_FILE -e boot/vmedia/grub-usb-vm.cfg -o $EFI_DIR/grub-usb-vm.cfg
   fi 

   # Add necessary files to the staging directory
   cur_dir=$PWD 
   pushd $STG_DIR > /dev/null  
   # Soft link iso image
   ln -s $ISO_FILE $IMG_DIR/install-image.iso

   # Prefer usb-image-grub.cfg over grub-usb.cfg if present in ISO
   ISO_FILES=$(isoinfo -f -R -i "$ISO_FILE")
   if echo "$ISO_FILES" | grep -q '^/boot/grub2/usb-image-grub.cfg$'; then
      EXTRACT_FILE=boot/grub2/usb-image-grub.cfg
   else
      EXTRACT_FILE=boot/grub2/grub-usb.cfg
   fi
   iso-read -i $IMG_DIR/install-image.iso -e "$EXTRACT_FILE" -o $EFI_DIR/grub.cfg || exit $?
   echo "Extracted '$EXTRACT_FILE' from '$ISO_FILE'"

   #Use iso-read to get the grub files
   iso-read -i $IMG_DIR/install-image.iso -e boot/grub2/bootx64.efi -o $EFI_DIR/bootx64.efi
   if [ $PLAT == "ncs1k" ]; then
      iso-read -i $IMG_DIR/install-image.iso -e boot/grub2/bootx64.efi -o $EFI_DIR/grub.efi
   fi
   if [ $PLAT == "ncs1001" ]; then
      iso-read -i $IMG_DIR/install-image.iso -e boot/grub2/bootx64.efi -o $EFI_DIR/grub.efi
   fi
   if [ $PLAT == "ncs1004" ]; then
      iso-read -i $IMG_DIR/install-image.iso -e boot/grub2/bootx64.efi -o $EFI_DIR/grub.efi
   fi
   if [ $PLAT == "ncs5k" ]; then
      iso-read -i $IMG_DIR/install-image.iso -e boot/grub2/bootx64.efi -o $EFI_DIR/grub.efi
   fi
   if [ $PLAT == "ncs2k" ]; then 
      iso-read -i $IMG_DIR/install-image.iso -e boot/grub2/Pkcs7VerifyDxe.efi -o $EFI_DIR/Pkcs7VerifyDxe.efi
   fi
 
   # If grub.cfg doesn't point to image inside /boot, change it to do that
   grep -q "/boot/install-image.iso" $EFI_DIR/grub.cfg || \
      sed -i -e "s;install-image.iso;boot/install-image.iso;" $EFI_DIR/grub.cfg

   if [ $PLAT == "ncs5k" ]; then
         sed -i '/install-image.iso/a\\tset root=(loop)' $EFI_DIR/grub.cfg
         sed -i -e "s;--speed=9600; ;" $EFI_DIR/grub.cfg
         sed -i -e "s;,9600; ;" $EFI_DIR/grub.cfg
   fi
   if [ $PLAT == "ncs5500" ]; then
       sed -i '/install-image.iso/a\\tset root=(loop)' $EFI_DIR/grub.cfg
       sed -i -e "s;--speed=9600;--speed=auto;" $EFI_DIR/grub.cfg
       sed -i -e "s;console=ttyS0,9600;console=uart,io,0x3f8;" $EFI_DIR/grub.cfg
       sed -i -e "s;giso_boot;giso_boot boot_mode=4;" $EFI_DIR/grub.cfg
   fi
   if [ $PLAT == "ncs540" ]; then
       sed -i '/install-image.iso/a\\tset root=(loop)' $EFI_DIR/grub.cfg
       sed -i -e "s;--speed=9600;--speed=auto;" $EFI_DIR/grub.cfg
       sed -i -e "s;console=ttyS0,9600;console=auto;" $EFI_DIR/grub.cfg
       sed -i -e "s;giso_boot;giso_boot boot_mode=4;" $EFI_DIR/grub.cfg
   fi
   if [ $PLAT == "ncs1k" ]; then
    sed -i '/install-image.iso/a\\tset root=(loop)' $EFI_DIR/grub.cfg
	sed -i -e "s;aer=off; aer=off intel_idle.max_cstate=0;" $EFI_DIR/grub.cfg	
    sed -i -e "s;giso_boot;giso_boot boot_mode=4;" $EFI_DIR/grub.cfg
   fi
   if [ $PLAT == "ncs1001" ]; then
    sed -i '/install-image.iso/a\\tset root=(loop)' $EFI_DIR/grub.cfg
	sed -i -e "s;aer=off; aer=off intel_idle.max_cstate=0;" $EFI_DIR/grub.cfg
	sed -i -e "s;giso_boot;giso_boot boot_mode=4;" $EFI_DIR/grub.cfg
   fi
   if [ $PLAT == "ncs1004" ]; then
    sed -i '/install-image.iso/a\\tset root=(loop)' $EFI_DIR/grub.cfg
	sed -i -e "s;aer=off; aer=off intel_idle.max_cstate=0;" $EFI_DIR/grub.cfg	
	sed -i -e "s;terminal_output serial;terminal_output console;" $EFI_DIR/grub.cfg
	sed -i -e "s;giso_boot;giso_boot boot_mode=4;" $EFI_DIR/grub.cfg
   fi
   if [ $PLAT == "ncs560" ]; then
       sed -i '/install-image.iso/a\\tset root=(loop)' $EFI_DIR/grub.cfg
       sed -i -e "s;--speed=9600;--speed=auto;" $EFI_DIR/grub.cfg
       sed -i -e "s;console=ttyS0,9600;console=auto;" $EFI_DIR/grub.cfg
   fi
   if [ $PLAT == "ncs2k" ]; then
        sign ${EFI_DIR}/grub.cfg
   fi 
   if [ $PLAT != "iosxrwbd" ]; then
       # Create zip file
       /usr/bin/zip -r $cur_dir/$ZIP_FILE *
       # Indicate zip file name
       echo "Zip file created - $ZIP_FILE"
   fi          

  # Create usb zip file for DDC as it uses a different efi and grub.cfg
  if [ $PLAT == "iosxrwbd" ]; then
      #Remove the default zip file created. DDC will use the below zip file.
      rm -f $cur_dir/$ZIP_FILE
      ZIP_FILE=$PLAT-usb_boot-ddc.zip
      $ISOREAD -i $ISO_FILE -o $STG_DIR
      mv $EFI_DIR/grub-cc.efi $EFI_DIR/bootx64.efi
      mv $EFI_DIR/grub-usb-vm.cfg $EFI_DIR/grub.cfg
      sed -i -e "s;pci=assign-busses;bootmedia=usb pci=use_crs;" $EFI_DIR/grub.cfg
      sed -i -e "s;aer=off; ;" $EFI_DIR/grub.cfg
      sed -i -e "s;console=ttyS0;console=tty0 console=ttyS0;" $EFI_DIR/grub.cfg

      rm $IMG_DIR/install-image.iso

      NEW_ZIP_DIR=$(mktemp -d /tmp/usb_boot.XXXXXXXXXX)
      NEW_EFI_DIR=$NEW_ZIP_DIR/EFI/boot
      mkdir -p $NEW_EFI_DIR
      NEW_IMG_DIR=$NEW_ZIP_DIR/boot
      mkdir -p $NEW_IMG_DIR
      cp -a $EFI_DIR/* $NEW_EFI_DIR/
      if echo "$ISO_FILES" | grep -q '^/boot/bzImage_GISO$'; then
         sed -i -e "s;enable_efi_vars;enable_efi_vars giso_boot;" $NEW_EFI_DIR/grub.cfg
      fi
      sed -i -e "s;giso_boot;giso_boot boot_mode=0x00000004;" $NEW_EFI_DIR/grub.cfg
      sed -i '/"Loading Kernel.."/a\        loopback loop /boot/install-image.iso' $NEW_EFI_DIR/grub.cfg
      sed -i -e "s;linux /boot/bzImage;linux (loop)/boot/bzImage;" $NEW_EFI_DIR/grub.cfg
      sed -i -e "s;initrd /boot/initrd.img;initrd (loop)/boot/initrd.img;" $NEW_EFI_DIR/grub.cfg
      ln -s $ISO_FILE $NEW_IMG_DIR/install-image.iso
      cd $NEW_ZIP_DIR > /dev/null
      # Create zip file
      /usr/bin/zip -r $cur_dir/$ZIP_FILE *

      cd - > /dev/null
      rm -rf $NEW_ZIP_DIR
      # Indicate zip file name
      echo "Zip file created - $ZIP_FILE"

      #Create Virtual Media bootable image for DCC
      command -v mcopy > /dev/null 2>&1
      if [ $? -eq 0 ]; then
          echo "Creating DDC Virtual media boot image"
          IMG_NAME=$cur_dir/$PLAT-boot-DDC.iso
          
          iso_size=$(du -sB 4M $ISO_FILE | awk '{printf "%d", $1}')
            
          let image_size=$iso_size+1

          dd if=/dev/zero of=$IMG_NAME bs=4M count=$image_size > /dev/null 2>&1
          
          mkfs.vfat -F 32 $IMG_NAME > /dev/null 2>&1

          recursive_mcopy $STG_DIR $IMG_NAME
          if [ $MCOPY_ERR -eq 1 ]; then
              echo "Failed to create boot image"
              rm $IMG_NAME
          else
              echo "Created $IMG_NAME"
          fi
      else
          echo "Missing mcopy binaries. Skipping DDC boot image creation."
      fi
  fi    


  popd > /dev/null

  # Clean out tmp directory
  rm -rf $STG_DIR

else 
   echo "$2 - File not present. Please provide a valid path"
fi

